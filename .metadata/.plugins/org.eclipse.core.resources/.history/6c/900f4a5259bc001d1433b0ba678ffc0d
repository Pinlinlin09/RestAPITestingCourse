package demo;
import static io.restassured.RestAssured.*;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Order;
import org.testng.Assert;

import io.restassured.builder.RequestSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.specification.RequestSpecification;
import pojo.LoginRequest;
import pojo.LoginResponse;
import pojo.Orders;
import pojo.OrdersDetail;

public class ECommerceAPITest {

	public static void main(String[] args) {
		/* Login
		 * By pass SSL certification: use "relaxedHTTPSValidation()" after given to bypass. 
		 */
		RequestSpecification req = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
				.setContentType(ContentType.JSON).build();
		
		LoginRequest loginReq = new LoginRequest();
		loginReq.setUserEmail("JohnSnowPostman@gmail.com");
		loginReq.setUserPassword("Postman123@");
		
		RequestSpecification reqLogin = given().relaxedHTTPSValidation().log().all().spec(req).body(loginReq);
		LoginResponse loginResponse = reqLogin.when().post("/api/ecom/auth/login").then().log().all()
				.extract().response().as(LoginResponse.class);
		System.out.println(loginResponse.getToken());
		String token = loginResponse.getToken();
		System.out.println(loginResponse.getUserId());
		String userId = loginResponse.getUserId();
		
		
		/*Add or Create product
		 * 
		 */
		RequestSpecification addProductBasereq = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
				.addHeader("authorization", token)
				.build();
		RequestSpecification reqAddProduct = given().log().all().spec(addProductBasereq)
		.param("productName", "CFAL1").param("productAddedBy", userId)
		.param("productCategory", "Certificate").param("productSubCategory", "Computer")
		.param("productPrice", 1150).param("productDescription", "Level1")
		.param("productFor", "unisex")
		.multiPart("productImage", new File("smile.png"));  
		
		String responseAddProduct = reqAddProduct.when().post("/api/ecom/product/add-product").then().log().all()
				.extract().response().asString();
		
		JsonPath js = new JsonPath(responseAddProduct);
		String productId = js.get("productId");
		
		//Create Order
		RequestSpecification createOrderBaseReq = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
				.addHeader("authorization", token).setContentType(ContentType.JSON)
				.build();
		
		OrdersDetail orderDetail = new OrdersDetail();
		orderDetail.setCountry("United States");
		orderDetail.setProductOrderedId(productId);
		//push orderDetail into the List
		List<OrdersDetail> orderDetailList = new ArrayList<>();
		orderDetailList.add(orderDetail);
		//then push list into orders List for the body()
		Orders orders = new Orders();
		orders.setOrders(orderDetailList);
		
		RequestSpecification createOrderReq = given().log().all().spec(createOrderBaseReq).body(orders);
		String responseAddOrder = createOrderReq.when().post("/api/ecom/order/create-order").then().log().all()
				.extract().response().asString();
		System.out.println(responseAddOrder);
		JsonPath createOrdjs = new JsonPath(responseAddOrder);
		List<Object> orderId = createOrdjs.getList("orders"); // need to use list to get the "orderId"
		System.out.println(orderId);
		
		
		/*view order detail
		 * 
		 */
		RequestSpecification viewOrderBaseReq = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
				.addHeader("authorization", token).setContentType(ContentType.JSON)
				.build();
		RequestSpecification viewOrdReq = given().log().all().spec(viewOrderBaseReq).queryParam("id", orderId);
		String viewOrderResponse = viewOrdReq.when().get("/api/ecom/order/get-orders-details").then().log().all()
				.extract().response().asString();
		System.out.println(viewOrderResponse);
		JsonPath id = new JsonPath(viewOrderResponse);
		String id2 = id.get("data._id");
		System.out.println(id2);
		
		/*Delete product
		 * 
		 */
		RequestSpecification deleteProdBaseReq = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
				.addHeader("authorization", token).setContentType(ContentType.JSON)
				.build();
		RequestSpecification deleteProdReq = given().log().all().spec(deleteProdBaseReq).pathParam("productId", productId);
		//use {} for pathparam at run time..complex thing extract as POJO. If only one thing here use asString()
		String deleteProductResponse = deleteProdReq.when().delete("/api/ecom/product/delete-product/{productId}").then().log().all()
				.extract().response().asString();
		JsonPath js1 = new JsonPath(deleteProductResponse);
		Assert.assertEquals("Product Deleted Successfully", js1.get("message"));
		
		/*
		 * Delete order
		 */
		
//		RequestSpecification deleteOrderBaseReq = new RequestSpecBuilder().setBaseUri("https://rahulshettyacademy.com")
//				.addHeader("authorization", token).setContentType(ContentType.JSON)
//				.build();
//		RequestSpecification deleteOrderReq = given().log().all().spec(deleteOrderBaseReq).pathParam("id", id2);
//		//use {} for pathparam at run time..complex thing extract as POJO. If only one thing here use asString()
//		String deleteOrderResponse = deleteOrderReq.when().delete("/api/ecom/order/delete-order/{id}").then().log().all()
//				.extract().response().asString();
//		JsonPath js2 = new JsonPath(deleteOrderResponse);
//		Assert.assertEquals("Orders Deleted Successfully", js2.get("message"));
	}
}
